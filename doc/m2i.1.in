./" preview the document using: nroff -e -mandoc <filename>
.TH ${DOC_TITLE} 1 ${DOC_DATE} "" "${DOC_NAME} Reference"
.SH NAME
${DOC_NAME} \- ${DOC_DESCRIPTION_SHORT}
.
.SH SYNOPSIS
.B ${DOC_NAME}
[OPTIONS]
.
.SH DESCRIPTION
${DOC_DESCRIPTION}
.SH OPTIONS
.TP
.B -h, --help
Print help text and exit
.TP
.B -v, --verbose
Output more information
.TP
.B -q, --quiet
Output less information
.TP
.B -c, --config
Specify the configuration script to use
.TP
.B -s, --script
Specify the script to use
.TP
.B -a, --alsa
Enable ALSA midi sequencer
.TP
.B -j, --jack
Enable jack midi sequencer
.
.SH FILES
${DOC_NAME} uses a config file and a script file. Examples are available in
${CMAKE_INSTALL_PREFIX}/share/m2i
.SS $XDG_CONFIG_HOME/m2i/config.lua
Specifies the default configuration, command line options override these values
if given.  These values are not guaranteed for the lifetime of the program, as
they are only loaded once on start up, and will disappear if a call to reload is
received from script file monitoring.
.sp
eg.
.nf
.RS 4
config = {
    key = value,
    ...
}
.RE
.fi
.TP
.B verbose = true|false
More information sent to stdout
.TP
.B quiet = true|false
Less information send to stdout
.TP
.B script = path
Path of the script file to load, if relative will look in current directory,
and then $XDG_CONFIG_HOME/m2i
.TP
.B use_alsa = true|false
Enable the ALSA sequencer back end
.TP
.B use_jack = true|false
Enable the jack sequencer back end
.TP
.B reconnect = true|false
Will attempt to reconnect to jack during the watch loop cycle. This option will
be removed when a better solution is implemented.
.TP
.B loop_enable = true|false
Enables evaluation of the loop() function implemented in the script.lua, and
will be removed once a decent scheduler is implemented.
.TP
.B main_freq = integer
Frequency in milliseconds of the main loop.
.TP
.B loop_freq = integer
Frequency in milliseconds of the loop() function implemented in the script.lua
.TP
.B watch_freq = integer
Frequency in milliseconds of the file monitoring and jack reconnection checks.
.SS $XDG_CONFIG_HOME/m2i/script.lua
The location can be specified on the command line with the -s flag or in the
config.lua as written above
.PP
A minimal example:
.nf
.RS 4
function script_init()
    print( "Nothing to init" )
end

function midi_recv( status, data1, data2 )
    print( status, data1, data2 )
end
.RE
.fi
.PP
Look in ${CMAKE_INSTALL_PREFIX}/share/m2i/ for more examples
.PP
The script is watched using inotify and when changed the lua environment is
reset and the script reloaded. This allows you to make changes and not have to
reload m2i manually.
.PP
.SS User defined lua functions:
.TP
.B midi_recv( status, data1, data2 )
This is the only user defined function that you are required to implement in
your script.  midi_recv( ... ) is called for every lua event that is received
by m2i and is where you react to events.
.TP
.B script_init()
Runs once immediately after loading the script.
.TP
.B loop()
Runs at a frequency of loop_freq as specified in the config.lua
.PP
.SS ${DOC_NAME} Inbuilt lua functions:
.br
These functions are implemented by m2i to use in your script.
.TP
.B print( 'string' ... )
An overload of the lua print functionality to tie it to the main application.
.TP
.B midi_send( { status, data1, data2 } )
Sends midi events to the output port to connected devices.
.TP
.B loop_enabled()
Enables the loop() function
.TP
.B exec( 'command' )
Runs an arbitrary command with whatever privileges the m2i utility has,
probably a bad idea really, but so long as its just a user application this is
quite useful.
.TP
.B quit()
Causes the main loop to exit, ending the application
.PP
.SS X11 functions:
.br
These lua functions to interface with the X11 windowing system, for keyboard
and mouse input.
.TP
.B keypress( XK_keycode )
.TP
.B keydown( XK_keycode )
.TP
.B keyup( XK_keycode )
.TP
.B buttonpress( n )
.TP
.B buttondown( n )
.TP
.B buttonup( n )
.TP
.B mousemove( x, y )
.TP
.B mousepos( x, y )
.PP
.SS ALSA and Jack functions:
.br
These lua functions to interface with ALSA and Jack sequencers
.TP
.B alsaconnect( 'client', 'port' )
.TP
.B jackconnect( 'client', 'port' )
.RE
.PP
.SS Global variables:
.TP
.B WM_CLASS
Is provided for differentiating between applications. It is updated during the
main loop with the contents of the currently focused window's X11 property
WM_CLASS. Using this you can provide a different control mechanism per
application.
.SH AUTHORS
 Samuel Nicholas <nicholas.samuel@gmail.com>
 Urs Liska
 Arthur Lutz
 Marcin Świgoń
 Jarrod Whittaker
.SH SEE ALSO
lua(1), jackd(1), <X11/keysymdef.h>
